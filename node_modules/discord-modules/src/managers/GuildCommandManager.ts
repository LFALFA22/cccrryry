import { Routes } from "discord-api-types/v10";
import { Guild, Snowflake } from "discord.js";

import { Client } from "@core/Client";
import { Errors } from "@core/Errors";

import { GuildApplicationCommand } from "@structs/GuildApplicationCommand";

export class GuildCommandManager {
    public readonly registry: Array<GuildApplicationCommand>;

    constructor(public readonly client: Client) {
        this.registry = new Array<GuildApplicationCommand>();
    }

    public register(command: GuildApplicationCommand): Promise<void> {
        const commandAlreadyRegistered: GuildApplicationCommand | undefined =
            this.registry.find(
                (c: GuildApplicationCommand) =>
                    c.options.guild === command.options.guild &&
                    c.options.data.name === command.options.data.name
            );
        const commandName: string = command.options.data.name;
        const guildId: Snowflake = command.options.guild.id;

        if (commandAlreadyRegistered) {
            return Promise.reject(
                Errors.GuildCommandAlreadyRegistered(commandName, guildId)
            );
        }

        this.registry.push(command);
        console.log(
            `Queued command '${commandName}' to be registered in guild '${guildId}'.`
        );
        return Promise.resolve();
    }

    public async refreshGuildCommands(guild: Guild): Promise<void> {
        const commands = this.registry
            .filter((c) => c.options.guild.id === guild.id)
            .map((c) => c.options.data);
        const refreshPromise = this.client.restClient.put(
            Routes.applicationGuildCommands(
                process.env.DISCORD_APPLICATION_ID as string,
                guild.id
            ),
            {
                body: commands
            }
        );

        await refreshPromise
            .then(() => {
                for (const command of commands) {
                    console.log(
                        `Registered command '${command.name}' in guild '${guild.id}'.`
                    );
                }
            })
            .catch(() => console.error);
    }
}
