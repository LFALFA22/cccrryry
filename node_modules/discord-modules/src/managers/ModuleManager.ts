import { Collection } from "discord.js";

import { Client } from "@core/Client";
import { Errors } from "@core/Errors";

import { Module } from "@structs/Module";

export class ModuleManger {
    public readonly registry: Collection<string, Module>;

    constructor(public readonly client: Client) {
        this.registry = new Collection<string, Module>();
    }

    /**
     * Register a specific module. Likely used to register module's commands and listeners.
     *
     * @param module Module to be registered.
     * @returns {Promise<void>}
     */
    public register(module: Module): Promise<void> {
        const moduleName = module.manifest.name.toLowerCase();

        if (this.registry.has(moduleName)) {
            return Promise.reject(Errors.ModuleWithNameAlreadyRegistered);
        }

        return module.register().then(() => {
            this.registry.set(moduleName, module);
        });
    }
}
