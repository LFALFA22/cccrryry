import { REST } from "@discordjs/rest";
import {
    Client as DiscordClient,
    ClientOptions as DiscordClientOptions,
    Interaction
} from "discord.js";

import { GuildCommandManager } from "@managers/GuildCommandManager";
import { ListenerManager } from "@managers/ListenerManager";
import { ModuleManger } from "@managers/ModuleManager";

class Client extends DiscordClient {
    public readonly moduleManager: ModuleManger;
    public readonly listenerManager: ListenerManager;
    public readonly guildCommandManager: GuildCommandManager;
    public readonly restClient: REST;

    constructor(options: DiscordClientOptions) {
        super(options);

        this.moduleManager = new ModuleManger(this);
        this.listenerManager = new ListenerManager(this);
        this.guildCommandManager = new GuildCommandManager(this);

        this.restClient = new REST({ version: "10" }).setToken(
            process.env.DISCORD_APPLICATION_TOKEN as string
        );

        this.on("interactionCreate", async (interaction: Interaction) => {
            if (!interaction.isCommand()) return;

            interaction.options.getSubcommand();

            const command = this.guildCommandManager.registry.find(
                (c) => c.options.data.name === interaction.commandName
            );

            if (command) {
                try {
                    await command.execute(interaction);
                } catch (err) {
                    console.error(err);
                    await interaction
                        .reply(
                            "An unexpected error occurred during the execution of this command," +
                                " please contact an administrator."
                        )
                        .catch(console.error);
                }
            }
        });
    }
}

export { Client };
