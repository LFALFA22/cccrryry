"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.GuildCommandManager = void 0;
const v10_1 = require("discord-api-types/v10");
const Errors_1 = require("../Errors");
class GuildCommandManager {
    client;
    registry;
    constructor(client) {
        this.client = client;
        this.registry = new Array();
    }
    register(command) {
        const commandAlreadyRegistered = this.registry.find((c) => c.options.guild === command.options.guild &&
            c.options.data.name === command.options.data.name);
        const commandName = command.options.data.name;
        const guildId = command.options.guild.id;
        if (commandAlreadyRegistered) {
            return Promise.reject(Errors_1.Errors.GuildCommandAlreadyRegistered(commandName, guildId));
        }
        this.registry.push(command);
        console.log(`Queued command '${commandName}' to be registered in guild '${guildId}'.`);
        return Promise.resolve();
    }
    async refreshGuildCommands(guild) {
        const commands = this.registry
            .filter((c) => c.options.guild.id === guild.id)
            .map((c) => c.options.data);
        const refreshPromise = this.client.restClient.put(v10_1.Routes.applicationGuildCommands(process.env.DISCORD_APPLICATION_ID, guild.id), {
            body: commands
        });
        await refreshPromise
            .then(() => {
            for (const command of commands) {
                console.log(`Registered command '${command.name}' in guild '${guild.id}'.`);
            }
        })
            .catch(() => console.error);
    }
}
exports.GuildCommandManager = GuildCommandManager;
